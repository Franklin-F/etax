"""
Django settings for project.

Generated by 'django-admin startproject' using Django 3.2.24.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import os
import environ
from pathlib import Path
# never import any class related with Django or DjangoRestFrameworks
# 创建实例env，管理环境变量
env = environ.Env(
    # set casting, default value
    DEBUG=(bool, False),
    CRM_PORT=(int, None),
)
# 动态地获取 Django 项目的根目录，并将其赋值给变量 BASE_DIR。在后续的配置中，BASE_DIR 会被广泛用于构建其他文件和目录的路径。
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent  # 项目根目录
# 从项目根目录下的 .env 文件中读取环境变量，并将其加载到当前的 Python 环境中。这样，在后续的代码中就可以使用 env 对象来获取这些环境变量的值
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

DEBUG = env('DEBUG')

HOST = 'etax.test.zxwy123.com' if DEBUG else 'etax.zxwy123.com'  # True 使用测试环境域名，False 使用正式环境域名

SECRET_KEY = env('SECRET_KEY', default='!7$*4mw+i*xp+)bdlrdc^g!qfa%pth_qx7q1k-9mn9^a)4-+_-')
# 限制访问项目的主机名或IP地址列表，可修改为本项目HOST地址
ALLOWED_HOSTS = [
    '*',
]


# Application definition
# 项目中启用的应用程序列表
INSTALLED_APPS = [
    'rest_framework',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'encrypted_model_fields',
    'environ',
    'agent.apps.AgentConfig',
]
# 中间件处理请求到达视图前和响应返回客户端前的工作
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
# 项目的根 URL 配置文件为 core.urls，Django 会根据该文件中的 URL 配置来处理请求
ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',  # 指定使用 Django 自带的模板引擎
        'DIRS': [],  # 指定模板文件的搜索路径，这里为空列表，表示不额外添加模板目录
        'APP_DIRS': True,  # 表示允许 Django 在每个应用的 templates 目录中查找模板文件
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'  #项目自动生成的 WSGI 应用入口，通常位于 core/wsgi.py 文件中，确保 Django 应用能够与 Web 服务器（如 Gunicorn、uWSGI 等）正确交互，处理 HTTP 请求并返回响应。

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': env.db(),
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators
# Django 内置的密码验证器，也可自定义验证类class后，在此引用
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        # 'OPTIONS': {
        #     'min_length': 8,  # 修改最小长度为 8
        # }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'  # 代码语言设置为英语

TIME_ZONE = 'Asia/Shanghai'  # 时区设置为上海

USE_I18N = True  # 启用国际化支持

USE_L10N = True  # 启用本地化支持

USE_TZ = False  # 禁用时区支持



# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'  # 静态文件的 URL 前缀

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')  # 静态文件的根目录

# Extra places for collectstatic to find static files.
STATICFILES_DIRS = (
    # os.path.join(BASE_DIR, 'agent/static'),
)  # 静态文件的额外搜索路径

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'  # 自动生成主键的默认字段类型

# encrypted_model_fields

FIELD_ENCRYPTION_KEY = os.environ.get('FIELD_ENCRYPTION_KEY', b'uv_1iG3yevmKM2dmlZs97SC1Svcvlc2XHeRIMBCenD4=')  # 加密字段的密钥，用于加密和解密字段值

# Playwright

PLAYWRIGHT_SCREENSHOT_DIR = env('PLAYWRIGHT_SCREENSHOT_DIR', default=os.path.join(BASE_DIR, 'screenshot'))  # 截图目录

# OSS地址
OSS_DIR = env('OSS_DIR', default=os.path.join(BASE_DIR, 'oss'))


# AGENT地址
AGENT_DIR = os.path.join(OSS_DIR, 'agent')
ASSETS_DIR = os.path.join(BASE_DIR, 'assets')
# DRF

REST_FRAMEWORK = {  # DRF配置
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
    # 'DATE_FORMAT': "%Y-%m-%d",
    # 'DATE_INPUT_FORMATS': "%Y-%m-%d",
    # 'DATETIME_FORMAT': "%Y-%m-%d %H:%M:%S",
}

# CRM

CRM_HOST = env('CRM_HOST', default='localhost')
CRM_PORT = env('CRM_PORT', default=8080)
CRM_PROTOCOL = env('CRM_PROTOCOL', default='http')
#
# # corpwechatbot 企业微信机器人配置
#
# WECOM_CORPID = env('WECOM_CORPID')
# WECOM_CORPSECRET = env('WECOM_CORPSECRET')
# WECOM_AGENTID = env('WECOM_AGENTID')
#
# # QUEUE
#
# QUEUE_URL = env('QUEUE_URL', default='amqp://guest:guest@localhost:5672/')
#
# # 临时token文件
# TEMPORARY_TOKEN_JSON = env('TEMPORARY_TOKEN_JSON', default='/tmp/token.json')
#
# # host地址
#
# TEST_HOST = env('TEST_HOST', default='http://etax.test.zxwy123.com:81/')
# PROD_HOST = env('PROD_HOST', default='https://etax.zxwy123.com:444/')
